{"version":3,"sources":["tracks/searchBar.js","util/Error.js","util/loading.js","tracks/deleteTrack.js","tracks/readTrack.js","tracks/createTrack.js","pages/home.js","util/Navbar.js","Auth/Login.js","Auth/Signup.js","pages/profile.js","App.js","serviceWorker.js","index.js"],"names":["searchBar","Component","withStyles","theme","snackbar","margin","spacing","classes","error","useState","open","setOpen","Snackbar","className","message","action","Button","onClick","color","size","Loading","this","props","navbar","DELETE_TRACK_MUTATION","gql","DeleteTrack","handle_delete","delete_track","mutation","variables","url","track","loading","data","DeleteOutline","Track","Grid","item","xs","style","Card","container","justify","alignItems","ThumbUp","Typography","variant","name","user","Box","my","Axios","defaults","baseURL","height","width","controls","ArrowDropDown","CREATE_TRACK_MUTATION","display","flexWrap","dialog","maxWidth","textField","cancel","save","button","icon","marginLeft","input","fab","position","bottom","right","zIndex","title","setTitle","hashtag","setHashtag","description","setDescription","file","setFile","submitting","setSubmitting","fileError","setFileError","handleAudioChange","event","selectedFile","target","files","handleAudioUpload","a","FormData","append","axios","post","res","console","handleSubmit","createTrack","preventDefault","uploadedUrl","onCompleted","update","cache","music","readQuery","query","GET_TRACKS_QUERY","concat","writeQuery","Dialog","onSubmit","DialogTitle","DialogContent","DialogContentText","FormControl","fullWidth","TextField","label","placeholder","onChange","value","multiline","rows","Boolean","id","required","type","accept","htmlFor","component","FormHelperText","DialogActions","disabled","trim","CircularProgress","Home","marginTop","map","key","Navbar","userSection","GET_SELF_QUERY","fetchPolicy","to","userself","grow","justifyContent","AccountCircleOutlined","noWrap","username","flexDirection","flexGrow","col","AppBar","root","Toolbar","padding","textDecoration","logo","marginRight","fontSize","faceIcon","LOGIN_MUTATION","form","account_trans","textAlign","cursor","setusername","password","setPassword","e","tokenAuth","client","localStorage","setItem","token","writeDate","isLoggedIn","direction","onError","log","called","InputLabel","Input","submit","SIGNUP_MUTATION","setUsername","email","setEmail","Profile","match","params","GET_USER_QUERY","musicSet","ApolloClient","uri","fetchOptions","credentials","request","operation","getItem","setContext","headers","Authorization","clientState","App","exact","path","Login","Signup","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.849e2a90.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class searchBar extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default searchBar\r\n","import React, { useState } from \"react\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\n\r\nconst Error = ({ classes, error }) => {\r\n  const [open, setOpen] = useState(true);\r\n\r\n  return (\r\n    <Snackbar\r\n      open={open}\r\n      className={classes.snackbar}\r\n      message={error.message}\r\n      action={\r\n        <Button onClick={() => setOpen(false)} color=\"secondary\" size=\"small\">\r\n          Close\r\n        </Button>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nconst styles = theme => ({\r\n  snackbar: {\r\n    margin: theme.spacing(1)\r\n  }\r\n});\r\n\r\nexport default withStyles(styles)(Error);\r\n","import React, { Component } from 'react'\r\n\r\nexport class Loading extends Component {\r\n    render() {\r\n        if (this.props.navbar) {\r\n            return (\r\n                <div>\r\n                    Loading...\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                    Loading...\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Loading\r\n","import { Button } from '@material-ui/core'\r\nimport { DeleteOutline } from '@material-ui/icons'\r\nimport { gql } from 'apollo-boost'\r\nimport React, { Component } from 'react'\r\nimport { Mutation, Query } from 'react-apollo'\r\nimport Error from '../util/Error'\r\nimport Loading from '../util/loading'\r\n\r\n\r\nconst DELETE_TRACK_MUTATION = gql`\r\nmutation delete_track ($url: String!) {\r\n  deleteTrack(url:$url) {\r\n    url\r\n  }\r\n}`\r\n\r\nexport class DeleteTrack extends Component {\r\n    handle_delete = (delete_track) => {\r\n        delete_track();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Mutation mutation={DELETE_TRACK_MUTATION} variables={{ url: this.props.track.url }}>\r\n                {(delete_track, { loading, error, data }) => {\r\n                    if (error) {\r\n                        return <Error error={error} />\r\n                    }\r\n                    if (!!loading) {\r\n                        return <Loading />\r\n                    }\r\n                    return <Button>\r\n                        <DeleteOutline onClick={() => { this.handle_delete(delete_track) }} />\r\n                    </Button>\r\n                }}\r\n            </Mutation>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DeleteTrack\r\n","import { Box, Card, Grid, Typography } from '@material-ui/core'\r\nimport { ArrowDropDown, ThumbUp } from '@material-ui/icons'\r\nimport Axios from 'axios';\r\nimport React, { Component } from 'react'\r\nimport ReactPlayer from 'react-player';\r\nimport DeleteTrack from './deleteTrack';\r\n\r\nexport class Track extends Component {\r\n    render() {\r\n        const track = this.props.track;\r\n        return (\r\n            <Grid item xs={10} style={{ margin: 'auto' }}>\r\n                <Card>\r\n                    <Grid container justify='space-evenly' style={{ alignItems: 'center' }}>\r\n                        <Grid item xs={1}>\r\n                            <ThumbUp />\r\n\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                            <Grid container>\r\n                                <Grid item xs={12}>\r\n                                    <Typography variant='body1'>\r\n                                        {track.name}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <Typography variant='caption'>\r\n                                        {track.user}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Box my='10px'>\r\n                                <ReactPlayer url={Axios.defaults.baseURL + '/music/' + track.url} height=\"30px\" width=\"500px\" controls={true} />\r\n\r\n                            </Box>\r\n                        </Grid>\r\n                        <DeleteTrack track={track} />\r\n                        <ArrowDropDown />\r\n                    </Grid>\r\n                </Card>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Track\r\n","import React, { useState } from \"react\";\r\nimport { Mutation } from 'react-apollo';\r\nimport { gql } from 'apollo-boost';\r\nimport axios from 'axios';\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport LibraryMusicIcon from \"@material-ui/icons/LibraryMusic\";\r\n\r\nimport { GET_TRACKS_QUERY } from '../App';\r\nimport Error from '../util/Error';\r\n\r\n\r\nconst CreateTrack = ({ classes }) => {\r\n    const [open, setOpen] = useState(false);\r\n    const [title, setTitle] = useState(\"\");\r\n    const [hashtag, setHashtag] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [file, setFile] = useState(\"\");\r\n    const [submitting, setSubmitting] = useState(false);\r\n    const [fileError, setFileError] = useState(\"\");\r\n\r\n    const handleAudioChange = event => {\r\n        const selectedFile = event.target.files[0]\r\n        const fileSizeLimit = 15000000;\r\n        if (selectedFile && selectedFile.size > fileSizeLimit) {\r\n            setFileError(`${selectedFile.name}: the file is limited 15Mb`)\r\n        } else {\r\n            setFile(selectedFile);\r\n            setFileError('');\r\n        }\r\n    }\r\n\r\n    const handleAudioUpload = async () => {\r\n        try {\r\n            const data = new FormData();\r\n            data.append('file', file);\r\n            const res = await axios.post(axios.defaults.baseURL + \"/music/\", data);\r\n            return res.data.url;\r\n        } catch (err) {\r\n            console.error('Cannot upload file', err);\r\n            setSubmitting(false);\r\n        }\r\n    };\r\n\r\n    const handleUpdateCache = (cache, { data: { createTrack } }) => {\r\n        const data = cache.readQuery({ query: GET_TRACKS_QUERY })\r\n        const music = data.music.concat(createTrack.music)\r\n        cache.writeQuery({ query: GET_TRACKS_QUERY, data: { music } })\r\n    }\r\n\r\n    const handleSubmit = async (event, createTrack) => {\r\n        event.preventDefault();\r\n        setSubmitting(true);\r\n        const uploadedUrl = await handleAudioUpload();\r\n        createTrack({ variables: { title, hashtag, description, url: uploadedUrl } });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {/* create track button */}\r\n            <Button onClick={() => setOpen(true)} variant=\"contained\" className={classes.fab} color=\"secondary\">\r\n                {open ? <ClearIcon /> : <AddIcon />}\r\n            </Button>\r\n\r\n            {/* create track DIALOG */}\r\n            <Mutation\r\n                mutation={CREATE_TRACK_MUTATION}\r\n                onCompleted={data => {\r\n                    setSubmitting(false)\r\n                    setOpen(false)\r\n                    setTitle(\"\")\r\n                    setDescription(\"\")\r\n                    setHashtag(\"\")\r\n                    setFile(\"\")\r\n                }}\r\n                update={handleUpdateCache}\r\n            /* refetchQueries={() => [{ query: GET_TRACKS_QUERY }]} */\r\n            >\r\n                {(createTrack, { loading, error }) => {\r\n                    if (error) return <Error error={error} />;\r\n\r\n                    return (\r\n                        <Dialog open={open} className={classes.dialog}>\r\n                            <form name='form' onSubmit={event => handleSubmit(event, createTrack)}>\r\n                                <DialogTitle>Create Track</DialogTitle>\r\n                                <DialogContent>\r\n                                    <DialogContentText>\r\n                                        Title\r\n                                    </DialogContentText>\r\n                                    <FormControl fullWidth>\r\n                                        <TextField\r\n                                            label=\"Title\"\r\n                                            placeholder=\"Title\"\r\n                                            onChange={event => setTitle(event.target.value)}\r\n                                            value={title}\r\n                                            className={classes.textField}\r\n                                        />\r\n                                    </FormControl>\r\n\r\n                                    <FormControl fullWidth>\r\n                                        <TextField\r\n                                            multiline\r\n                                            rows=\"3\"\r\n                                            label=\"Description\"\r\n                                            placeholder=\"Description\"\r\n                                            onChange={event => setDescription(event.target.value)}\r\n                                            value={description}\r\n                                            className={classes.textField}\r\n                                        />\r\n                                    </FormControl>\r\n\r\n                                    <FormControl fullWidth>\r\n                                        <TextField\r\n                                            multiline\r\n                                            rows=\"3\"\r\n                                            label=\"Hashtag\"\r\n                                            placeholder=\"#\"\r\n                                            onChange={event => setHashtag(event.target.value)}\r\n                                            value={hashtag}\r\n                                            className={classes.textField}\r\n                                        />\r\n                                    </FormControl>\r\n\r\n                                    <FormControl error={Boolean(fileError)}>\r\n                                        <input\r\n                                            id=\"audio\"\r\n                                            required\r\n                                            type=\"file\"\r\n                                            accept=\"audio\"\r\n                                            className={classes.input}\r\n                                            onChange={handleAudioChange}\r\n                                        />\r\n                                        <label htmlFor=\"audio\">\r\n                                            <Button variant=\"outlined\" color={file ? \"secondary\" : \"inherit\"}\r\n                                                component=\"span\" className={classes.button}\r\n                                            >\r\n                                                Max size 15Mb\r\n                                                <LibraryMusicIcon className={classes.icon} />\r\n                                            </Button>\r\n                                            {file && file.name}\r\n                                            <FormHelperText>{fileError}</FormHelperText>\r\n                                        </label>\r\n                                    </FormControl>\r\n                                </DialogContent>\r\n                                <DialogActions>\r\n                                    <Button\r\n                                        disabled={submitting}\r\n                                        onClick={() => setOpen(false)}\r\n                                        className={classes.cancel}\r\n                                    >\r\n                                        Cancel\r\n                  </Button>\r\n                                    <Button\r\n                                        disabled={\r\n                                            submitting || !title.trim() || !description.trim() || !file\r\n                                        }\r\n                                        type=\"cancel\"\r\n                                        className={classes.save}\r\n                                    >\r\n                                        {submitting ? (\r\n                                            <CircularProgress className={classes.save} size={24} />\r\n                                        ) : (\"Submit\")}\r\n                                    </Button>\r\n                                </DialogActions>\r\n                            </form>\r\n                        </Dialog>\r\n                    )\r\n                }}\r\n            </Mutation>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nconst CREATE_TRACK_MUTATION = gql`\r\n  mutation ($title: String!, $description: String!, $hashtag: String!, $url: String!) {\r\n    createTrack(title: $title, description: $description, hashtag: $hashtag, url: $url) \r\n    {\r\n      track {\r\n        id\r\n        title\r\n        description\r\n        hashtag\r\n        url\r\n        owner {\r\n          id\r\n          username\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst styles = theme => ({\r\n    container: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\"\r\n    },\r\n    dialog: {\r\n        margin: \"0 auto\",\r\n        maxWidth: 550\r\n    },\r\n    textField: {\r\n        margin: theme.spacing(1)\r\n    },\r\n    cancel: {\r\n        color: \"red\"\r\n    },\r\n    save: {\r\n        color: \"green\"\r\n    },\r\n    button: {\r\n        margin: theme.spacing(2)\r\n    },\r\n    icon: {\r\n        marginLeft: theme.spacing(1)\r\n    },\r\n    input: {\r\n        display: \"none\"\r\n    },\r\n    fab: {\r\n        position: \"fixed\",\r\n        bottom: theme.spacing(2),\r\n        right: theme.spacing(2),\r\n        zIndex: \"200\"\r\n    }\r\n});\r\n\r\nexport default withStyles(styles)(CreateTrack);\r\n","import { Grid } from '@material-ui/core';\r\nimport React, { Component } from 'react'\r\nimport SearchBar from '../tracks/searchBar';\r\nimport Track from '../tracks/readTrack';\r\nimport CreateTrack from '../tracks/createTrack';\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport { Query } from \"react-apollo\";\r\nimport { GET_TRACKS_QUERY } from '../App';\r\nimport Error from '../util/Error';\r\n\r\nconst Home = ({ classes, props }) => {\r\n    return (\r\n        <div style={{ marginTop: '3rem' }}>\r\n            <SearchBar />\r\n            <Query query={GET_TRACKS_QUERY}>\r\n                {({ data, loading, error }) => {\r\n                    if (loading) return <div>loading...</div>;\r\n                    if (error) return <Error error={error} />;\r\n                    const music = data.music;\r\n                    return <Grid container>\r\n                        {loading && <div> Loading... </div>}\r\n                        {music.map((track) => <Track key={track.id} track={track} />)}\r\n                    </Grid>\r\n                }}\r\n            </Query>\r\n            <CreateTrack />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import { AppBar, Button, Grid, Toolbar, Typography, withStyles } from '@material-ui/core'\r\nimport { AccountCircleOutlined } from '@material-ui/icons';\r\nimport React, { Component } from 'react'\r\nimport { Query } from 'react-apollo';\r\nimport { Link } from 'react-router-dom'\r\nimport Error from './Error';\r\nimport Loading from './loading';\r\nimport { GET_SELF_QUERY } from '../App';\r\n\r\nexport class Navbar extends Component {\r\n    render() {\r\n        let userSection;\r\n\r\n        userSection = <Query query={GET_SELF_QUERY} fetchPolicy='cache-and-network'>\r\n            {({ error, loading, data }) => {\r\n                if (data) {\r\n                    return <Link to={`/profile/${data.userself.id}`} className={classes.grow} style={{ justifyContent: 'flex-end' }}>\r\n                        <AccountCircleOutlined />\r\n                        <Typography variant='h5' noWrap className={classes.username}>\r\n                            {data.userself.username}\r\n                        </Typography>\r\n                    </Link>\r\n                } else {\r\n                    return <Grid container style={{\r\n                        width: 'auto',\r\n                        display: 'flex',\r\n                        flexDirection: 'row-reverse',\r\n                        flexGrow: 1,\r\n                    }}>\r\n                        <Grid item col>\r\n                            <Link to='/login'>\r\n                                <Button>\r\n                                    Login\r\n                            </Button>\r\n                            </Link>\r\n                            <Link to='/signup'>\r\n                                <Button>\r\n                                    Signup\r\n                            </Button>\r\n\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n            }}\r\n        </Query>\r\n\r\n        const classes = this.props.classes;\r\n        return (\r\n            <AppBar className={classes.root}>\r\n                <Toolbar>\r\n                    <Link to='/' className={classes.grow}>\r\n                        <Typography variant='h5' color='secondary' noWrap>\r\n                            Peter Muscially\r\n                        </Typography>\r\n                        {userSection}\r\n                    </Link>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n        )\r\n    }\r\n}\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        position: 'static',\r\n        flexGrow: 1,\r\n        margin: 0,\r\n        padding: 0\r\n    },\r\n    grow: {\r\n        flexGrow: 1,\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        textDecoration: \"none\"\r\n    },\r\n    logo: {\r\n        marginRight: theme.spacing(1),\r\n        fontSize: 45\r\n    },\r\n    faceIcon: {\r\n        marginRight: theme.spacing(1),\r\n        fontSize: 30,\r\n        color: \"white\"\r\n    },\r\n    username: {\r\n        color: \"white\",\r\n        fontSize: 30\r\n    }\r\n});\r\n\r\nexport default withStyles(styles)(Navbar)\r\n","import React, { Component, useState } from 'react'\r\nimport { gql } from 'apollo-boost';\r\nimport { Button, FormControl, Grid, Input, InputLabel, Paper, Typography, withStyles } from '@material-ui/core';\r\nimport { Mutation } from 'react-apollo';\r\nimport Error from '../util/Error';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Login = ({ classes }) => {\r\n    const [username, setusername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const handleSubmit = async (e, tokenAuth, client) => {\r\n        e.preventDefault();\r\n        try {\r\n            const res = await tokenAuth();\r\n            localStorage.setItem('authToken', res.data.tokenAuth.token)\r\n            client.writeDate({ data: { isLoggedIn: true } });\r\n        } catch (e) {\r\n            return\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid container direction='row' style={{ justifyContent: 'center' }}>\r\n            <Grid item xs={8} spacing={2}>\r\n                <Mutation\r\n                    mutation={LOGIN_MUTATION}\r\n                    variables={{ username, password }}\r\n                    onError={() => { console.log('error') }}>\r\n                    {(tokenAuth, { loading, error, called, client }) => {\r\n                        return (\r\n                            <form onSubmit={e => handleSubmit(e, tokenAuth, client)}\r\n                                className={classes.form}>\r\n                                <FormControl margin=\"normal\" required fullWidth>\r\n                                    <InputLabel htmlFor=\"username\">username</InputLabel>\r\n                                    <Input\r\n                                        id=\"username\"\r\n                                        onChange={event => setusername(event.target.value)}\r\n                                    />\r\n                                </FormControl>\r\n\r\n                                <FormControl margin=\"normal\" required fullWidth>\r\n                                    <InputLabel htmlFor=\"password\">Password</InputLabel>\r\n                                    <Input\r\n                                        id=\"password\"\r\n                                        type=\"password\"\r\n                                        onChange={event => setPassword(event.target.value)}\r\n                                    />\r\n                                </FormControl>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    disabled={\r\n                                        loading ||\r\n                                        !username.trim() ||\r\n                                        !password.trim()\r\n                                    }\r\n                                    className={classes.submit}\r\n                                >\r\n                                    {loading ? \"loading\" : \"Login\"}\r\n                                </Button>\r\n\r\n\r\n                                {error && <Error error={error} />}\r\n                            </form>\r\n                        )\r\n                    }}\r\n                </Mutation>\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n                <Link to='/signup'>\r\n                    <Typography\r\n                        className={classes.account_trans}\r\n                        variant=\"body2\"\r\n                        fullWidth\r\n                    >\r\n                        Don't a account? <a> Signup </a>\r\n                    </Typography>\r\n                </Link>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\nconst LOGIN_MUTATION = gql`\r\nmutation ($username: String!, $password: String!){\r\n    tokenAuth(username: $username, password: $password){\r\n        token\r\n    }\r\n}`;\r\n\r\n\r\nconst styles = theme => ({\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1)\r\n    },\r\n    account_trans: {\r\n        textAlign: 'center',\r\n        marginTop: '2rem',\r\n        color: \"black\",\r\n        '&:hover': {\r\n            cursor: 'pointer',\r\n        }\r\n    }\r\n})\r\nexport default withStyles(styles)(Login)\r\n","import React, { Component, useState } from 'react'\r\nimport { gql } from 'apollo-boost';\r\nimport { Button, Container, FormControl, Grid, Input, InputLabel, Paper, Typography, withStyles } from '@material-ui/core';\r\nimport { Mutation } from 'react-apollo';\r\nimport Error from '../util/Error';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Signup = ({ classes }) => {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const handleSubmit = async (e, tokenAuth, client) => {\r\n        e.preventDefault();\r\n        try {\r\n            const res = await tokenAuth();\r\n            localStorage.setItem('authToken', res.data.tokenAuth.token)\r\n            client.writeDate({ data: { isLoggedIn: true } });\r\n        } catch (e) {\r\n            return\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container direction='row' style={{ justifyContent: 'center' }}>\r\n                <Grid item xs={8} spacing={2}>\r\n                    <Mutation\r\n                        mutation={SIGNUP_MUTATION}\r\n                        variables={{ username, email, password }}\r\n                        onError={() => { }}>\r\n                        {(tokenAuth, { loading, error, called, client }) => {\r\n                            return (\r\n                                <>\r\n                                    <form onSubmit={e => handleSubmit(e, tokenAuth, client)}\r\n                                        className={classes.form}>\r\n                                        <FormControl margin=\"normal\" required fullWidth>\r\n                                            <InputLabel htmlFor=\"username\">Username</InputLabel>\r\n                                            <Input\r\n                                                id=\"username\"\r\n                                                onChange={event => setUsername(event.target.value)}\r\n                                            />\r\n                                        </FormControl>\r\n                                        <FormControl margin=\"normal\" required fullWidth>\r\n                                            <InputLabel htmlFor=\"email\">email</InputLabel>\r\n                                            <Input\r\n                                                id=\"email\"\r\n                                                onChange={event => setEmail(event.target.value)}\r\n                                            />\r\n                                        </FormControl>\r\n                                        <FormControl margin=\"normal\" required fullWidth>\r\n                                            <InputLabel htmlFor=\"password\">Password</InputLabel>\r\n                                            <Input\r\n                                                id=\"password\"\r\n                                                type=\"password\"\r\n                                                onChange={event => setPassword(event.target.value)}\r\n                                            />\r\n                                        </FormControl>\r\n                                        <Button\r\n                                            type=\"submit\"\r\n                                            fullWidth\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            disabled={\r\n                                                loading ||\r\n                                                !username.trim() ||\r\n                                                !password.trim()\r\n                                            }\r\n                                            className={classes.submit}\r\n                                        >\r\n                                            {loading ? \"loading\" : \"Signup\"}\r\n                                        </Button>\r\n                                        {error && <Error error={error} />}\r\n                                    </form>\r\n                                </>\r\n                            )\r\n                        }}\r\n                    </Mutation>\r\n                </Grid>\r\n            </Grid>\r\n            <Link to='/login'>\r\n                <Typography\r\n                    className={classes.account_trans}\r\n                    variant=\"body2\"\r\n                    fullWidth\r\n                >\r\n                    Already have a account? <a> Login </a>\r\n                </Typography>\r\n            </Link>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst SIGNUP_MUTATION = gql`\r\nmutation ($username:String!, $password:String!, $email:String!) {\r\n    createUser(username:$username, password:$password, email:$email) {\r\n        user {\r\n            username\r\n            email\r\n        }\r\n    }\r\n}`;\r\n\r\n\r\nconst styles = theme => ({\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1)\r\n    },\r\n    account_trans: {\r\n        textAlign: 'center',\r\n        marginTop: '2rem',\r\n        color: \"black\",\r\n        '&:hover': {\r\n            cursor: 'pointer',\r\n        }\r\n    }\r\n})\r\nexport default withStyles(styles)(Signup)\r\n","import { Grid, Typography } from '@material-ui/core';\r\nimport { AccountCircleOutlined } from '@material-ui/icons';\r\nimport React, { Component } from 'react'\r\nimport { Query } from 'react-apollo';\r\nimport { GET_USER_QUERY } from '../App';\r\nimport Track from '../tracks/readTrack';\r\nimport Error from '../util/Error';\r\nimport Loading from '../util/loading';\r\n\r\nexport const Profile = (props, classes) => {\r\n    let id = props.match.params.id;\r\n    return (\r\n        <Query query={GET_USER_QUERY} variables={{ id: id }}>\r\n            {({ loading, error, data }) => {\r\n                if (!!loading) {\r\n                    return <Loading />\r\n                }\r\n                if (error) {\r\n                    return <Error error={error} />\r\n                }\r\n                console.log(data)\r\n                return <Grid container style={{ display: 'flex' }}>\r\n                    <AccountCircleOutlined color='primary' />\r\n                    <Grid item>\r\n                        <Typography variant='body1'>\r\n                            {data.user.username}\r\n                        </Typography>\r\n                        <Typography variant='caption'>\r\n                            {data.user.email}\r\n                        </Typography>\r\n                    </Grid>\r\n                    {data.user.musicSet.map((track) => {\r\n                        return <Track track={track} />\r\n                    })}\r\n                </Grid>\r\n            }}\r\n        </Query >\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\nimport Home from './pages/home';\r\nimport ApolloClient, { gql } from 'apollo-boost';\r\nimport { ApolloProvider, Query } from 'react-apollo';\r\nimport Navbar from './util/Navbar';\r\n\r\n\r\nimport Axios from 'axios';\r\nimport Login from './Auth/Login';\r\nimport Signup from './Auth/Signup';\r\nimport Profile from './pages/profile';\r\n\r\nAxios.defaults.baseURL = 'https://musically.tbitzz.com';\r\n\r\nconst client = new ApolloClient({\r\n  uri: Axios.defaults.baseURL + '/graphql/',\r\n  fetchOptions: {\r\n    credentials: \"include\"\r\n  },\r\n  request: operation => {\r\n    const token = localStorage.getItem('authToken') || \"\"\r\n    operation.setContext({\r\n      headers: {\r\n        Authorization: `JWT ${token}`\r\n      }\r\n    })\r\n  },\r\n  clientState: {\r\n    defaults: {\r\n      isLoggedIn: !!localStorage.getItem('authToken')\r\n    }\r\n  }\r\n});\r\n\r\nconst IS_LOGGED_IN_QUERY = gql`\r\n    query {\r\n        isLoggedIn @client\r\n    }\r\n`;\r\n\r\n\r\nexport const GET_SELF_QUERY = gql`\r\n  {\r\n    userself {\r\n      id\r\n      username\r\n      email\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_USER_QUERY = gql`\r\n  query ($id:Int!){\r\n    user (id: $id){\r\n      id\r\n      username\r\n      email\r\n      dateJoined\r\n      musicSet{\r\n        id\r\n        title\r\n        url\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <Navbar />\r\n        <Switch>\r\n          <Route exact path='/' component={Home} />\r\n          <Route exact path='/login' component={Login} />\r\n          <Route exact path='/signup' component={Signup} />\r\n          <Route path='/profile/:id' component={Profile} />\r\n        </Switch>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\n\r\nexport const GET_TRACKS_QUERY = gql`\r\n  query getTracksQuery {\r\n    music {\r\n      id\r\n      title\r\n      description\r\n      hashtag\r\n      url\r\n      owner {\r\n        id\r\n        username\r\n      }\r\n    }\r\n  }\r\n\r\n`;\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}